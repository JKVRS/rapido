Physical :-
Models :- USERS, VEHICLES
Features : -
1. A user can have role to convert as a driver.
2. User can sing up and login.(based on role).
3. customer will put source and destination and vehicle type.
4. Nearest drivers should get the request if he is not available than it will go to the second nearest driver.
5. After booking the vehicle details should show to the end user.
6. ETA of rider will be shown to the end user.
7. Trip start and end should be done by rider.
8.  End user can cancel the booking.
9. After completing the trip , trip summary shared with the end users.
10. End use can view riding history.

---------------------------------------------------------------------------------------------------

Class User{
   String email
   Long phone
   String name
   List<RideSummery> ridesHistory;
   UserType userType;
   Ride  currentRide;
   String password;


}

enum UserType{
  CUSTOMER, RIDER
}

Class Customer extends User{


}

Class Rider extends User{
     RiderStatus riderStatus;
     List<Ride> rideRequest;

     Vehicle vehicle;

}

enum RiderStatus
{
  AVAILABLE, LOCKED, BOOKED
}

Class Vehicle{
     User user;
     String vehicleName;
     String vehicleType;
     int vehicleNumber;
     String vehicleColor;
     int capacity;
     int currentCapacity;

}
Class Ride{
   Customer customer;
   Rider rider;
   Vehicle vehicle;
   Location source;
   Location destination;
   Date requestAt;
   Double tripFare;
   int totalPassengers;

}
class RideSummary extends Ride{
      List<Payment> payment;

}
class Location{
  double latitude;
  double longitude;
}
class LocationMap{
  String placeName;
  Location location;
}
class Payment{
   String referenceNumber;
   PaymentMethod paymentMethod;
   double amount;
   PaymentType paymentType ;
   PaymentStatus status;

}
enum PaymentMethod{
  ONLINE, CASH, UPI;
}
enum PaymentType{
     CAPTURED, REFUND, CANCELLED
}
enum PaymentStatus{
   SUCCESS, FAILED, PROGRESS
}

interface FareCalculateStrategy{
  double calculateFare(Ride ride);
}
class calculateFareBasedOnRideStrategy{
    double calculateFare(Ride ride){

    }
}

----------------------------------------------------------------------------------------------------------

Schema Design :-

Users  :       id , name, email, password, address, phone, userType , rideId,

Customers :    customerId, UserID

Riders :       RidersId, UserId, vehicleId

Vehicles :     Id, vehicleNumber, VehicleName, vehicleColor, capacity, CurrentCapacity, userid

Location :     id,  Latitude, longitude

LocationMap :  id, placeName, locationId

Rides  :       RideID, RidersId

RideSummary :  id, userId, vehicleId, locationId, requestedAt, totalPassengers, totalamount

Payment :      id, referenceNumber, amount

PaymentStatus : id, status

PaymentType  :  id , payment

PaymentMethod : id, paymentMethod

RiderStatus :   id, riderStatus

UserType:       id, type






